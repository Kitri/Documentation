**  BIO 
   My life journey consists of many adventures involving problem solving and art.

   I started by learning the art of object oriented coding and soon transitioned into the world of data. I dabbled in the traditional SQL Business Intelligence and then found a passion for distributed processing with nosql databases and frameworks such as Apache Spark.

   After some time I took up the additional role of team lead along with my "senior developer responsibilities" of several different teams over a few years. I went on some short management courses, did my scrum master certifications, spoke to many people and read a few books and eventually started semi getting the hang of this new "people side of things". I really enjoy facilitation and being able to make a difference in people's careers by helping them work towards their full potential.

   Recently I moved back to a technical focused space, this time attempting Functional Programming. I learnt that even though I no longer have a "lead" title I still tend to apply the core skills I learnt as a lead to my every day work life.

   Outside of work I like to climb every mountain and thus spend many weekends in nature on the side of some cliff. I also do ballroom dancing, occasional painting and outdoor photography. On less active weekends I like to engage in long, intense boardgame sessions.

   I like VIM and Emacs (.. on evil mode). And potatoes.

** Talk 1 Notes
*** Title
    5 Things the BI, OO and FP worlds could learn from each other, from someone who has lived in all 3

*** Talk Description 
    In my career I moved from Object Oriented Programming (OOP) to Business Intelligence (BI) and there after Functional Programming (FP). In doing so I gained valuable experience in working across these 3 completely different, yet somewhat similar "worlds".

In this session I will dig deeper into each of these 3 worlds, share my experience about switching between them with the challenges I faced and discoveries I made throughout my career. Having worked in all three of these worlds I can confirm that they are indeed different, however, combining mindsets from each of these worlds can lead to better and more creative solutions. I specifically found that having a strong BI background has given me a unique perspective on things and also made my transition from OOP to FP easier.  

I will highlight some things that each of these "worlds" do well that the other worlds can learn from and why it may be beneficial to know more about each of these different areas in order to build the ultimate software solution!

*** Notes

    In the software industry there are three major areas that people typically classify themselves under: Front-end, back-end and database. Splitting the back-end area into two: Object Oriented Programming (OOP) and Functional Programming (FP) we now have 4 major areas, or "worlds" of work. These 4 worlds require different mindsets and approaches to solving problems, which makes it difficult to switch from one to the other easily and leads to software engineers classifying themselves in one, maybe two, of these "worlds". 
    - Art of OO/FP/BI
    - Mindset
    - Approach to solving problems
**** FP: 
     - Stateless
     - Concurrency
     - monads 
       - allows for error bubbling
       - can do set wise operations such as map
     - no loops
     - immutable
     - Design can be elegant (if you understand the complex workings under the hood)
     - Hard to learn

**** OO
     - Object based
     - Work with 1 item at a time
     - Transformation done on a single object at a time
     - Mutable objects
     - Not concurrent safe
     - Design can become spaghetti easily
     - Error handling all over
     - Can miss errors
     - State per object

**** BI
     - Work in sets
     - Transformations on sets
     - Allows for distributed processing
     - Concurrency safe
     - Errors per transaction
     - Idempotent - it's ok to rerun the script
     - Stores state but easy to change

** Talk 2 Notes
*** Title
    5 core skills to help you become a better team lead - from an introvert dev who learnt the hard way 

*** Talk Description
    People tend to be promoted to their level of imcompetence. In software this frequently manifests as taking the most technically skilled person, promoting them to team lead, and making them responsible for people-oriented tasks, which they have never had the opportunity to learn or exercise. For many people figuring out how to maximise your team and ensure they're happy and have warm fuzzy team feelings is not an easy task.

In this session I will share my experience having been in that awkward position where I suddenly had to "lead a team" and then had to go through the long, difficult process of learning these "people skills" that I now needed along with my technical skills. I went on some short management courses at GIBS, a scrum master course, spoke to many people, and read some books. After some failures, I eventually started getting better at it, but just as I got used to and more comfortable with being a team lead I decided to move back into a technical role. 

I will explain some "core skills" that I have found make a huge difference to you as a leader and your team as individuals as well as the team as a whole, also how to step back from responsibilities you had previously. Some of these skills are easy to explain and may seem quite obvious to the non-introverts among us, but for the rest of us these lessons come only after years of experience and trial and error and it is my hope that I'm able to relay some of the lessons learnt through this talk.

*** Notes
    Firstly, yes, your focus is now on the people and not only the tech.
    - Regular one-on-ones
    - Get to know the people in your team
    - Understand levels of trust
    - Values / ? / Action - always find out what the value was before judging the action
    - Pay attention to the meta conversation
    - Read books: 5 dysfunctions of a team, talking with tech leads
    - Learn to facilitate
    - Team building / activities. Going for coffee as a team can be magic!
    - Maximise your team
      - Find each person's strengths and figure out how to leverage it
      - Also find people's growth areas and help them figure out how to grow in those areas
      - Make sure that their strengths actually aligns with what they want to do - don't force them to do stuff they're good at which they hate!
    - Be approachable
    - Give the option of a 2ic or someone else they can approach in case they aren't comfortable doing it with you, or want to complain about you.

**** As a ex-team lead in a dev team, these are my experiences:
- Was a lead, now I am a dev with a lead
- lead in training and hard for me to step back to let them learn 
- by default tuning in to team members and internally asking questions like "why is that person late for standup? What is the underlying reason?
- Used to "calling the shots", I get to decide when other people take leave, where I also never really had to "ask permission" to take leave. Since I knew when my team was taking leave and where we were at with work I could make the call on whether it was a good time for me to take leave, and then after the decision discuss it with my team. Now I have to first discuss it with my team lead, which adds a different dimension to it
- Used to running around between meetings, one-on-ones, checking in with my account manager about my team - if they need training etc, and when I get to code it's my own choice what I work on and when to do so. I could manage my own time, since I was too busy to commit to pairing 
- Had to start introspecting to determine "what makes a good team member" .. and then try to be that person
- I am now a full-time dev again and finding it challenging to focus on one thing for an extended period of time.
- I held the space for my previous teams, now I need to be part of the team where the space had already been defined and I need to fit into the space


